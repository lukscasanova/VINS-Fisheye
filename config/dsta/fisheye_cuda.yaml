%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2

is_fisheye: 1
imu_topic: "/imu/data"
# imu_topic: "/dji_sdk_1/dji_sdk/imu"
image0_topic: "/rc1/camera_0/image_raw"
image1_topic: "/rc1/camera_1/image_raw"
output_path: "/home/subt/output"

depth_config: "depth_cuda.yaml"
cam0_calib: "cam0_mei.yaml"
cam1_calib: "cam1_mei.yaml"
image_width: 600 # For fisheye, this indicate the flattened image width; min 100; 300 - 500 is good for vins
image_height: 400
show_width: 1920

fisheye_fov: 235

enable_up_top: 1
enable_down_top: 1
enable_up_side: 1
enable_down_side:   1
enable_rear_side: 0
thres_outlier : 5.0
tri_max_err: 3.0
# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0      # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [-9.9976859207641566e-01, -2.0419615309842348e-02, -6.7676885374550987e-03, 1.0041994853591515e-01,
          -2.0331614565147961e-02, 9.9971101351759828e-01, -1.2826336218523096e-02,-6.9190870397943874e-02,
          7.0276416183676083e-03, -1.2685770067851064e-02,-9.9989483621582398e-01, -5.1112919670412704e-02,
          0, 0, 0, 1]
   
#cam1   
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [-9.9985560124058459e-01, -1.5586934864883988e-02,-6.7693522103760822e-03,  -1.4515182384962866e-01,
       -1.5436429066125672e-02,9.9964439677155092e-01, -2.1743887898177865e-02,-6.9284115443611183e-02,
       7.1058655712538006e-03, -2.1636253482521395e-02, -9.9974065597520068e-01, -5.6738709154149310e-02,
       0, 0, 0, 1]



pub_flatten: 1
flatten_color: 0
warn_imu_freq: 0
imu_freq: 200
image_freq: 20

multiple_thread: 1
#Gpu accleration support

use_vxworks: 0
use_gpu: 1
use_gpu_acc_flow: 1

enable_depth: 1 # If estimate depth cloud; only available for dual fisheye now
rgb_depth_cloud: -1 # -1: point no texture,  0 depth cloud will be gray, 1 depth cloud will be colored;
#Note that textured and colored depth cloud will slow down whole system

depth_estimate_baseline: 0.05
top_cnt: 30
side_cnt: 100
max_solve_cnt: 100 # Max Point for solve; highly influence performace

# min_dist: 20            # min distance between two features, this is for GFTT
min_dist: 20            # for vworks
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1           # perform forward and backward optical flow to improve feature tracking accuracy
enable_perf_output: 0

#optimization parameters
max_solver_time: 0.04 # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
# max_solver_time: 1.0  # max solver itration time (ms), to guarantee real time
# max_num_iterations: 100   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.001        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.85         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
# td: -0.0736        #-0.0736 when use DJI IMU                       # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)#
td: 0.014686 #Use mynteye imu
#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/xuhao/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

#rectify
publish_rectify: 0              # whether publish rectified pose
cam0_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]

cam1_rectify: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0, 0, 1,
         -1, 0, 0,
         0, -1, 0 ]
